import { NextResponse, type MiddlewareConfig, type NextRequest } from "next/server";

// üîì Rotas p√∫blicas ‚Äî controlam o que acontece quando o usu√°rio est√° autenticado
const publicRoutes = [
  { path: "/", whenAutenticated: "next" }, // ‚úÖ permite acessar mesmo logado
  { path: '/forgot-password', whenAutenticated: 'next' },
  { path: '/reset-password', whenAutenticated: 'next' },
  { path: "/login", whenAutenticated: "redirect" },
  { path: "/register", whenAutenticated: "redirect" },
  { path: "/sobre", whenAutenticated: "next" },
  { path: "/contato", whenAutenticated: "next" },
  { path: "/politica", whenAutenticated: "next" },
  { path: "/pricing", whenAutenticated: "next" },
];

// üîí Rota padr√£o para redirecionar quem n√£o est√° autenticado
const REDIRECT_WHEN_NOT_AUTHENTICATED_ROUTE = "/login";

// üöß Rota de painel (para redirecionar logados, se quiser)
const DASHBOARD_ROUTE = "/dashboard";

export function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;
  const publicRoute = publicRoutes.find((route) => route.path === path);
  const authToken = request.cookies.get("token"); // üîë Token salvo nos cookies

  // 1Ô∏è‚É£ Usu√°rio sem token ‚Üí verificamos se pode acessar
  if (!authToken) {
    // Rota √© p√∫blica ‚Üí pode seguir
    if (publicRoute) return NextResponse.next();

    // Rota √© privada ‚Üí redireciona pro login
    const redirectUrl = request.nextUrl.clone();
    redirectUrl.pathname = REDIRECT_WHEN_NOT_AUTHENTICATED_ROUTE;
    return NextResponse.redirect(redirectUrl);
  }

  // 2Ô∏è‚É£ Usu√°rio com token ‚Üí verificamos o tipo de rota
  if (authToken && publicRoute) {
    // Se a rota p√∫blica pede redirecionamento ‚Üí envia para "/"
    if (publicRoute.whenAutenticated === "redirect") {
      const redirectUrl = request.nextUrl.clone();
      redirectUrl.pathname = "/";
      return NextResponse.redirect(redirectUrl);
    }

    // (Opcional) Se quiser redirecionar logados da home para dashboard
    if (publicRoute.whenAutenticated === "redirect-dashboard") {
      const redirectUrl = request.nextUrl.clone();
      redirectUrl.pathname = DASHBOARD_ROUTE;
      return NextResponse.redirect(redirectUrl);
    }
  }

  // 3Ô∏è‚É£ Usu√°rio logado acessando rota privada ‚Üí pode seguir
  return NextResponse.next();
}

// ‚öôÔ∏è Configura√ß√£o do matcher (middleware roda em todas as p√°ginas, exceto API/arquivos est√°ticos)
export const config: MiddlewareConfig = {
  matcher: [
    "/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)",
  ],
};
